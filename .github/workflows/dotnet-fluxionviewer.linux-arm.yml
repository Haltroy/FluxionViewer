name: FluxionViewer Linux ARM
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Set-up cross-compiling AArch64
        run: |
          sudo dpkg --add-architecture arm64
          sudo bash -c 'cat > /etc/apt/sources.list.d/arm64.list <<EOF
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy main restricted
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-updates main restricted
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-backports main restricted universe multiverse
          EOF'
          sudo sed -i -e 's/deb http/deb [arch=amd64] http/g' /etc/apt/sources.list
          sudo sed -i -e 's/deb mirror/deb [arch=amd64] mirror/g' /etc/apt/sources.list
          sudo apt update
          sudo apt install alien clang llvm zlib1g-dev:arm64 zlib1g-dev gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu -y
      - name: Restore dependencies
        run: dotnet restore ./src/FluxionViewer.Linux/FluxionViewer.Linux.csproj
      - name: Build
        run: dotnet build --no-restore ./src/FluxionViewer.Linux/FluxionViewer.Linux.csproj
      - name: Publish (Linux ARM64)
        run: |
          export OBJCOPY=aarch64-linux-gnu-objcopy
          dotnet publish -c Release -r linux-arm64 -p:LinkerFlavor=lld -p:ObjCopyName=$OBJCOPY -o ./publish/linux-arm64/ ./src/FluxionViewer.Linux/FluxionViewer.Linux.csproj
          rm ./publish/linux-arm64/*.dbg
          tar czf ./publish/fluxionviewer-linux-arm64.tar.gz ./publish/linux-arm64/
      - name: Upload Artifact (Linux ARM64)
        uses: actions/upload-artifact@v4
        with:
          name: FluxionViewer-Linux-ARM64
          path: ./publish/fluxionviewer-linux-arm64.tar.gz
      # Debian ARM64
      - name: Debian Package ARM64
        run: ./linux/debian/build-arm64.sh ./publish/linux-arm64/
      - name: Upload Artifact (Debian ARM64)
        uses: actions/upload-artifact@v4
        with:
          name: FluxionViewer-aarch64-Debian
          path: ./linux/debian/fluxionviewer.aarch64.deb
      # RPM x64 (convert with Alien)
      - name: RPM conversion ARM64
        run: sudo $(which alien) -r ./linux/debian/*.deb
      - name: Upload Artifact (RPM ARM64)
        uses: actions/upload-artifact@v4
        with:
          name: FluxionViewer-aarch64-RPM
          path: ./*.rpm
      # Linux MUSL ARM64
      - name: Publish (Linux MUSL ARM64)
        run: |
          export OBJCOPY=aarch64-linux-gnu-objcopy
          dotnet publish -c Release -r linux-musl-arm64 -p:LinkerFlavor=lld -p:ObjCopyName=$OBJCOPY -o ./publish/linux-musl-arm64/ ./src/FluxionViewer.Linux/FluxionViewer.Linux.csproj
          rm ./publish/linux-musl-arm64/*.dbg
          tar czf ./publish/fluxionviewer-linux-musl-arm64.tar.gz ./publish/linux-musl-arm64/
      - name: Upload Artifact (Linux MUSL ARM64)
        uses: actions/upload-artifact@v4
        with:
          name: FluxionViewer-Linux-MUSL-ARM64
          path: ./publish/fluxionviewer-linux-musl-arm64.tar.gz
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2
      - name: Build APK in Alpine Container
        run: |
          docker run --rm -v $(pwd):/build -w /build alpine:latest sh -c "
          apk add --no-cache alpine-sdk tar bash &&
          adduser -D builder &&
          echo 'builder ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers &&
          chown -R builder:builder /build &&
          su builder -c '
          export CARCH=aarch64 &&
          abuild-keygen -ain
          cd ./linux/alpine/arm64 &&
          abuild checksum &&
          abuild -r
          cd ../musl-arm64 &&
          abuild checksum &&
          abuild -r'"
      - name: Upload Artifact (Alpine packages)
        uses: actions/upload-artifact@v4
        with:
          name: FluxionViewer-Linux-Alpine
          path: ./linux/alpine/*/*.apk
